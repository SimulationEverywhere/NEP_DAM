/*************** Loggers *******************/

namespace {  

std::ofstream out_data("TOP_OUTPUT.txt");
    struct oss_sink_provider{
        static std::ostream& sink(){
            return out_data;
        }
    };
}
//using messages_logger=cadmium::logger::logger<cadmium::logger::logger_message_routing, cadmium::logger::verbatim_formatter, cadmium::logger::cout_sink_provider>;

using info=cadmium::logger::logger<cadmium::logger::logger_info, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using debug=cadmium::logger::logger<cadmium::logger::logger_debug, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using state=cadmium::logger::logger<cadmium::logger::logger_state, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using log_messages=cadmium::logger::logger<cadmium::logger::logger_messages, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using routing=cadmium::logger::logger<cadmium::logger::logger_message_routing, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using global_time=cadmium::logger::logger<cadmium::logger::logger_global_time, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using local_time=cadmium::logger::logger<cadmium::logger::logger_local_time, cadmium::logger::verbatim_formatter, oss_sink_provider>;
using log_all=cadmium::logger::multilogger<info, debug, state, log_messages, routing, global_time, local_time>;

using logger_top=cadmium::logger::multilogger<log_messages, global_time>;
/*******************************************/

int main(){
    auto start = hclock::now(); //to measure simulation execution time
    //cadmium::engine::runner<NDTime, TOP, log_all > r{{0}};
    //cadmium::engine::runner<NDTime, TOP, logger_top > r{{0}};
    cadmium::engine::runner<NDTime, TOP, log_messages > r{{0}};
    //cadmium::engine::runner<NDTime, TOP> r{{0}};
    r.runUntil(NDTime("02:00:00:000"));
    //r.runUntil(std::numeric_limits<NDTime>::infinity());

    auto elapsed = std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1>>>(hclock::now() - start).count();
    cout << "Simulation took:" << elapsed << "sec" << endl;
    string file = string("SimulationFinished.txt");
        ofstream myModelfile;
        myModelfile.open(file);
        myModelfile << "finished ok" << endl;
        myModelfile.close();

    return 0;
}